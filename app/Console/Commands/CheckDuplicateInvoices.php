<?php

namespace App\Console\Commands;

use App\Models\Order;
use App\Models\OfflineOrder;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Services\InvoiceNumberService;

class CheckDuplicateInvoices extends Command
{
    protected $signature = 'invoices:check-duplicates {--fix : ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ุชููุงุฆูุงู}';
    protected $description = 'ูุญุต ูุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุงููุธุงู';

    public function handle()
    {
        $this->info('=== ูุญุต ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ===');
        $this->newLine();

        $shouldFix = $this->option('fix');
        
        // ูุญุต ุงูููุงุชูุฑ ุงูุนุงุฏูุฉ
        $this->info('1. ูุญุต ุงูููุงุชูุฑ ุงูุนุงุฏูุฉ:');
        $duplicates = Order::select('invoice_number', 'created_at', DB::raw('COUNT(*) as count'))
            ->whereNotNull('invoice_number')
            ->groupBy('invoice_number', 'created_at')
            ->having('count', '>', 1)
            ->get();

        if ($duplicates->isEmpty()) {
            $this->info('โ ูุง ุชูุฌุฏ ููุงุชูุฑ ููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุนุงุฏู');
        } else {
            $this->warn("โ ุชู ุงูุนุซูุฑ ุนูู " . $duplicates->count() . " ููุงุชูุฑ ููุฑุฑุฉ:");
            foreach ($duplicates as $dup) {
                $this->warn("ุฑูู ุงููุงุชูุฑุฉ: {$dup->invoice_number} | ุงูุชุงุฑูุฎ: {$dup->created_at} | ุงูุนุฏุฏ: {$dup->count}");
            }
            
            if ($shouldFix) {
                $this->fixDuplicateOrders($duplicates);
            }
        }

        $this->newLine();

        // ูุญุต ุงูููุงุชูุฑ ุงูุฃูููุงูู
        $this->info('2. ูุญุต ุงูููุงุชูุฑ ุงูุฃูููุงูู:');
        $offlineDuplicates = OfflineOrder::select('invoice_number', 'created_at', DB::raw('COUNT(*) as count'))
            ->whereNotNull('invoice_number')
            ->groupBy('invoice_number', 'created_at')
            ->having('count', '>', 1)
            ->get();

        if ($offlineDuplicates->isEmpty()) {
            $this->info('โ ูุง ุชูุฌุฏ ููุงุชูุฑ ููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุฃูููุงูู');
        } else {
            $this->warn("โ ุชู ุงูุนุซูุฑ ุนูู " . $offlineDuplicates->count() . " ููุงุชูุฑ ููุฑุฑุฉ:");
            foreach ($offlineDuplicates as $dup) {
                $this->warn("ุฑูู ุงููุงุชูุฑุฉ: {$dup->invoice_number} | ุงูุชุงุฑูุฎ: {$dup->created_at} | ุงูุนุฏุฏ: {$dup->count}");
            }
            
            if ($shouldFix) {
                $this->fixDuplicateOfflineOrders($offlineDuplicates);
            }
        }

        $this->newLine();
        $this->info('=== ุงูุชูู ุงููุญุต ===');
    }
    
    /**
     * ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุฌุฏูู ุงูุทูุจุงุช ุงูุนุงุฏูุฉ
     */
    private function fixDuplicateOrders($duplicates)
    {
        $this->info('๐ง ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุนุงุฏู...');
        
        foreach ($duplicates as $duplicate) {
            $orders = Order::where('invoice_number', $duplicate->invoice_number)
                ->orderBy('created_at', 'asc')
                ->get();
            
            // ุงูุงุญุชูุงุธ ุจุงูุทูุจ ุงูุฃูู ูุชุบููุฑ ุจุงูู ุงูุทูุจุงุช
            $firstOrder = $orders->first();
            $otherOrders = $orders->skip(1);
            
            foreach ($otherOrders as $order) {
                $newInvoiceNumber = InvoiceNumberService::generateInvoiceNumber();
                $order->update(['invoice_number' => $newInvoiceNumber]);
                $this->info("ุชู ุชุบููุฑ ุฑูู ูุงุชูุฑุฉ ุงูุทูุจ {$order->id} ุฅูู: {$newInvoiceNumber}");
            }
        }
        
        $this->info('โ ุชู ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุนุงุฏู');
    }
    
    /**
     * ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุฌุฏูู ุงูุทูุจุงุช ุงูุฃูููุงูู
     */
    private function fixDuplicateOfflineOrders($duplicates)
    {
        $this->info('๐ง ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุฃูููุงูู...');
        
        foreach ($duplicates as $duplicate) {
            $orders = OfflineOrder::where('invoice_number', $duplicate->invoice_number)
                ->orderBy('created_at', 'asc')
                ->get();
            
            // ุงูุงุญุชูุงุธ ุจุงูุทูุจ ุงูุฃูู ูุชุบููุฑ ุจุงูู ุงูุทูุจุงุช
            $firstOrder = $orders->first();
            $otherOrders = $orders->skip(1);
            
            foreach ($otherOrders as $order) {
                $newInvoiceNumber = InvoiceNumberService::generateInvoiceNumber();
                $order->update(['invoice_number' => $newInvoiceNumber]);
                $this->info("ุชู ุชุบููุฑ ุฑูู ูุงุชูุฑุฉ ุงูุทูุจ ุงูุฃูููุงูู {$order->id} ุฅูู: {$newInvoiceNumber}");
            }
        }
        
        $this->info('โ ุชู ุฅุตูุงุญ ุงูููุงุชูุฑ ุงูููุฑุฑุฉ ูู ุงูุฌุฏูู ุงูุฃูููุงูู');
    }
} 